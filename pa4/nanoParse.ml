type token =
  | Num of (int)
  | TRUE
  | FALSE
  | Id of (string)
  | LET
  | REC
  | EQ
  | IN
  | FUN
  | ARROW
  | IF
  | THEN
  | ELSE
  | EOF
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LT
  | LE
  | NE
  | AND
  | OR
  | LPAREN
  | RPAREN
  | COLONCOLON
  | LBRAC
  | RBRAC
  | SEMI
  | APP

open Parsing;;
let _ = parse_error;;
# 2 "nanoParse.mly"
(* See this for a tutorial on ocamlyacc 
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ *)
open Nano 
# 40 "nanoParse.ml"
let yytransl_const = [|
  258 (* TRUE *);
  259 (* FALSE *);
  261 (* LET *);
  262 (* REC *);
  263 (* EQ *);
  264 (* IN *);
  265 (* FUN *);
  266 (* ARROW *);
  267 (* IF *);
  268 (* THEN *);
  269 (* ELSE *);
    0 (* EOF *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* MUL *);
  273 (* DIV *);
  274 (* LT *);
  275 (* LE *);
  276 (* NE *);
  277 (* AND *);
  278 (* OR *);
  279 (* LPAREN *);
  280 (* RPAREN *);
  281 (* COLONCOLON *);
  282 (* LBRAC *);
  283 (* RBRAC *);
  284 (* SEMI *);
  285 (* APP *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  260 (* Id *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\004\000\004\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\006\000\007\000\004\000\001\000\
\006\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\002\000\003\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\002\000\003\000\004\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\034\000\000\000\014\000\022\000"

let yysindex = "\002\000\
\170\001\000\000\000\000\000\000\000\000\000\000\252\254\001\255\
\000\000\170\001\170\001\097\255\066\001\000\000\255\254\003\255\
\254\254\127\255\156\255\000\000\065\255\238\254\170\001\170\001\
\170\001\170\001\170\001\170\001\170\001\170\001\170\001\170\001\
\170\001\066\001\170\001\004\255\170\001\170\001\000\000\170\001\
\000\000\144\001\237\255\237\255\181\001\181\001\144\001\144\001\
\144\001\118\001\092\001\144\001\014\001\170\001\066\001\205\255\
\000\000\170\001\040\001\170\001\066\001\170\001\066\001\066\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\241\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\211\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\097\000\049\000\073\000\001\000\025\000\115\000\133\000\
\151\000\187\000\205\000\169\000\000\000\000\000\213\000\000\000\
\000\000\000\000\000\000\000\000\234\000\000\000\236\000\242\000"

let yygindex = "\000\000\
\003\000\000\000\000\000\232\255"

let yytablesize = 719
let yytable = "\015\000\
\012\000\016\000\001\000\013\000\017\000\035\000\036\000\037\000\
\041\000\038\000\054\000\027\000\018\000\019\000\021\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\000\000\053\000\000\000\055\000\
\056\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\000\000\000\000\000\000\000\061\000\000\000\063\000\000\000\
\064\000\003\000\004\000\005\000\006\000\007\000\000\000\023\000\
\015\000\008\000\009\000\010\000\000\000\000\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\011\000\
\000\000\033\000\012\000\000\000\040\000\000\000\000\000\000\000\
\021\000\003\000\004\000\005\000\006\000\007\000\000\000\000\000\
\000\000\008\000\009\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\012\000\020\000\000\000\000\000\000\000\003\000\
\004\000\005\000\006\000\007\000\017\000\023\000\000\000\008\000\
\009\000\010\000\038\000\000\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\011\000\018\000\033\000\
\012\000\000\000\000\000\000\000\003\000\004\000\005\000\006\000\
\007\000\000\000\023\000\000\000\008\000\009\000\010\000\000\000\
\024\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\011\000\039\000\033\000\012\000\000\000\000\000\
\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\003\000\004\000\005\000\
\006\000\007\000\010\000\023\000\007\000\008\000\009\000\010\000\
\000\000\060\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\011\000\000\000\033\000\012\000\000\000\
\000\000\005\000\000\000\009\000\000\000\003\000\004\000\005\000\
\006\000\006\000\000\000\000\000\000\000\008\000\009\000\000\000\
\000\000\000\000\000\000\000\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\012\000\012\000\012\000\
\012\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\
\012\000\012\000\000\000\012\000\012\000\013\000\000\000\013\000\
\013\000\000\000\000\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\013\000\000\000\013\000\013\000\014\000\000\000\014\000\
\014\000\000\000\000\000\014\000\014\000\014\000\014\000\014\000\
\000\000\000\000\014\000\014\000\014\000\014\000\014\000\000\000\
\014\000\014\000\000\000\014\000\014\000\015\000\000\000\015\000\
\015\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
\000\000\000\000\015\000\015\000\015\000\015\000\015\000\000\000\
\015\000\015\000\000\000\015\000\015\000\021\000\000\000\021\000\
\021\000\000\000\000\000\021\000\021\000\021\000\000\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\016\000\
\021\000\016\000\016\000\021\000\021\000\016\000\016\000\016\000\
\000\000\000\000\000\000\000\000\016\000\016\000\016\000\016\000\
\016\000\017\000\016\000\017\000\017\000\016\000\016\000\017\000\
\017\000\017\000\000\000\000\000\000\000\000\000\017\000\017\000\
\017\000\017\000\017\000\018\000\017\000\018\000\018\000\017\000\
\017\000\018\000\018\000\018\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\024\000\018\000\024\000\
\024\000\018\000\018\000\024\000\024\000\024\000\000\000\000\000\
\000\000\000\000\024\000\024\000\024\000\024\000\024\000\019\000\
\024\000\000\000\019\000\024\000\024\000\019\000\019\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\019\000\020\000\019\000\000\000\020\000\019\000\019\000\020\000\
\020\000\020\000\010\000\000\000\007\000\000\000\010\000\010\000\
\007\000\007\000\020\000\000\000\020\000\000\000\000\000\020\000\
\020\000\000\000\010\000\000\000\007\000\010\000\010\000\007\000\
\007\000\005\000\000\000\009\000\000\000\005\000\005\000\009\000\
\009\000\006\000\000\000\000\000\000\000\006\000\006\000\000\000\
\000\000\005\000\000\000\009\000\005\000\005\000\009\000\009\000\
\000\000\006\000\000\000\000\000\006\000\006\000\003\000\004\000\
\005\000\006\000\007\000\000\000\023\000\058\000\008\000\009\000\
\010\000\000\000\000\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\011\000\000\000\033\000\012\000\
\003\000\004\000\005\000\006\000\007\000\000\000\023\000\062\000\
\008\000\009\000\010\000\000\000\000\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\011\000\000\000\
\033\000\012\000\003\000\004\000\005\000\006\000\007\000\000\000\
\023\000\000\000\008\000\009\000\010\000\000\000\000\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\011\000\000\000\033\000\012\000\003\000\004\000\005\000\006\000\
\000\000\000\000\023\000\000\000\008\000\009\000\000\000\000\000\
\000\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\000\000\011\000\000\000\033\000\012\000\003\000\004\000\
\005\000\006\000\000\000\000\000\023\000\000\000\008\000\009\000\
\000\000\000\000\000\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\000\000\000\000\011\000\000\000\033\000\012\000\
\003\000\004\000\005\000\006\000\000\000\000\000\000\000\000\000\
\008\000\009\000\000\000\000\000\000\000\024\000\025\000\026\000\
\027\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\033\000\012\000\003\000\004\000\005\000\006\000\007\000\000\000\
\000\000\000\000\008\000\009\000\010\000\003\000\004\000\005\000\
\006\000\000\000\000\000\000\000\000\000\008\000\009\000\000\000\
\011\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\012\000"

let yycheck = "\004\001\
\000\000\006\001\001\000\001\000\004\001\007\001\004\001\010\001\
\027\001\000\000\007\001\027\001\010\000\011\000\012\000\040\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\255\255\035\000\255\255\037\000\
\038\000\255\255\040\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\054\000\255\255\255\255\255\255\058\000\255\255\060\000\255\255\
\062\000\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\000\000\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\028\001\255\255\255\255\255\255\
\000\000\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\023\001\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\000\000\007\001\255\255\009\001\
\010\001\011\001\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\000\000\025\001\
\026\001\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\255\255\009\001\010\001\011\001\255\255\
\000\000\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\001\001\002\001\003\001\
\004\001\005\001\000\000\007\001\000\000\009\001\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\000\000\255\255\000\000\255\255\001\001\002\001\003\001\
\004\001\000\000\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\005\001\026\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\027\001\028\001\005\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\027\001\028\001\005\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\027\001\028\001\005\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\027\001\028\001\005\001\255\255\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\005\001\
\024\001\007\001\008\001\027\001\028\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\005\001\024\001\007\001\008\001\027\001\028\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\005\001\024\001\007\001\008\001\027\001\
\028\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\005\001\024\001\007\001\
\008\001\027\001\028\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\005\001\
\024\001\255\255\008\001\027\001\028\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\005\001\024\001\255\255\008\001\027\001\028\001\011\001\
\012\001\013\001\008\001\255\255\008\001\255\255\012\001\013\001\
\012\001\013\001\022\001\255\255\024\001\255\255\255\255\027\001\
\028\001\255\255\024\001\255\255\024\001\027\001\028\001\027\001\
\028\001\008\001\255\255\008\001\255\255\012\001\013\001\012\001\
\013\001\008\001\255\255\255\255\255\255\012\001\013\001\255\255\
\255\255\024\001\255\255\024\001\027\001\028\001\027\001\028\001\
\255\255\024\001\255\255\255\255\027\001\028\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\255\255\009\001\010\001\011\001\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\001\001\002\001\003\001\004\001\
\255\255\255\255\007\001\255\255\009\001\010\001\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\025\001\026\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\255\255\009\001\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\255\255\025\001\026\001\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\023\001\255\255\
\025\001\026\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\001\001\002\001\003\001\
\004\001\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\023\001\255\255\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\026\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  LET\000\
  REC\000\
  EQ\000\
  IN\000\
  FUN\000\
  ARROW\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EOF\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LT\000\
  LE\000\
  NE\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  COLONCOLON\000\
  LBRAC\000\
  RBRAC\000\
  SEMI\000\
  APP\000\
  "

let yynames_block = "\
  Num\000\
  Id\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 34 "nanoParse.mly"
                                ( Const _1 )
# 355 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "nanoParse.mly"
                                ( True )
# 361 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "nanoParse.mly"
                                ( False )
# 367 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "nanoParse.mly"
                                ( Var _1 )
# 374 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 38 "nanoParse.mly"
                                ( Let (_2,_4,_6) )
# 383 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 39 "nanoParse.mly"
                                ( Letrec (_3, _5, _7) )
# 392 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 40 "nanoParse.mly"
                                ( Fun (_2,_4) )
# 400 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "nanoParse.mly"
                                ( NilExpr )
# 406 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Nano.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 42 "nanoParse.mly"
                                ( If (_2,_4,_6) )
# 415 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 43 "nanoParse.mly"
                                ( App(_1,_2) )
# 423 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 44 "nanoParse.mly"
                                ( _2 )
# 430 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 45 "nanoParse.mly"
                                ( Bin (_1,Mul,_3) )
# 438 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 46 "nanoParse.mly"
                                ( Bin (_1,Div,_3) )
# 446 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 47 "nanoParse.mly"
                                ( Bin (_1,Plus,_3) )
# 454 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 48 "nanoParse.mly"
                                ( Bin (_1,Minus,_3) )
# 462 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 49 "nanoParse.mly"
                                ( Bin (_1,Lt,_3) )
# 470 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 50 "nanoParse.mly"
                                ( Bin (_1,Le,_3) )
# 478 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 51 "nanoParse.mly"
                                ( Bin (_1,Ne,_3) )
# 486 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 52 "nanoParse.mly"
                                ( Bin (_1,And,_3) )
# 494 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 53 "nanoParse.mly"
                                ( Bin (_1,Or,_3) )
# 502 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 54 "nanoParse.mly"
                                ( Bin (_1, Eq, _3) )
# 510 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 55 "nanoParse.mly"
                                ( _1 )
# 517 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "nanoParse.mly"
                                ( NilExpr )
# 523 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 60 "nanoParse.mly"
                                ( Bin( _1, Cons, _3) )
# 531 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 61 "nanoParse.mly"
                                ( _2 )
# 538 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 64 "nanoParse.mly"
                                ( Bin( _1, Cons, _3) )
# 546 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 65 "nanoParse.mly"
                                ( Bin( _1, Cons, NilExpr) )
# 553 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "nanoParse.mly"
                                ( Plus )
# 559 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "nanoParse.mly"
                                ( Minus )
# 565 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "nanoParse.mly"
                                ( Mul )
# 571 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "nanoParse.mly"
                                ( Div )
# 577 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "nanoParse.mly"
                                ( Lt )
# 583 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "nanoParse.mly"
                                ( Le )
# 589 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "nanoParse.mly"
                                ( Ne )
# 595 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "nanoParse.mly"
                                ( And )
# 601 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "nanoParse.mly"
                                ( Or )
# 607 "nanoParse.ml"
               : Nano.binop))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "nanoParse.mly"
                                ( Cons )
# 613 "nanoParse.ml"
               : Nano.binop))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
